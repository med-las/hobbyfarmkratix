# ansible/playbooks/wso2-existing-user.yaml - WSO2 setup for existing users
---
# WSO2 Setup Tasks for existing users (not creating new users)
# This file contains only tasks since it's included via include_tasks

- name: Set WSO2 variables for existing user
  set_fact:
    wso2_version: "{{ wso2_version | default('4.2.0') }}"
    java_version: "{{ java_version | default('11') }}"
    wso2_service_name: "wso2-{{ session_name }}"
    wso2_port: "{{ 9443 + (session_name | hash | int) % 1000 }}"  # Dynamic port based on session

- name: Install packages required for WSO2
  apt:
    name:
      - vim
      - curl
      - wget
      - git
      - htop
      - net-tools
      - unzip
      - python3
      - "openjdk-{{ java_version }}-jdk"
    state: present

- name: Create WSO2 directories for existing user session
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ session_user }}"
    group: "{{ session_user }}"
    mode: '0755'
  loop:
    - "{{ session_user_home }}/workspace/{{ session_name }}/wso2"
    - "{{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}"
    - "{{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/bin"
    - "{{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/repository"
    - "{{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/repository/conf"
    - "{{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/repository/logs"
    - "{{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/lib"

- name: Create WSO2 mock web server script for existing user session
  copy:
    content: |
      #!/usr/bin/env python3
      import http.server
      import socketserver
      import os
      import sys
      import signal
      
      class WSO2MockHandler(http.server.SimpleHTTPRequestHandler):
          def do_GET(self):
              self.send_response(200)
              self.send_header('Content-type', 'text/html')
              self.end_headers()
              response = f'''
      <html><head><title>WSO2 API Manager Training - {{ session_name }}</title></head>
      <body>
      <h1>üöÄ WSO2 API Manager Training Environment</h1>
      <h2>‚úÖ Session: {{ session_name }} - Active</h2>
      <h3>User: {{ session_user }}</h3>
      <p>WSO2 API Manager {{ wso2_version }} Training Simulation</p>
      <h3>Access Information:</h3>
      <p><strong>URL:</strong> https://{{ ansible_default_ipv4.address }}:{{ wso2_port }}/</p>
      <p><strong>Username:</strong> admin</p>
      <p><strong>Password:</strong> admin</p>
      <p><strong>Session Name:</strong> {{ session_name }}</p>
      <p><strong>User:</strong> {{ session_user }}</p>
      <h3>Training Commands:</h3>
      <ul>
      <li>sudo systemctl status {{ wso2_service_name }}</li>
      <li>sudo systemctl restart {{ wso2_service_name }}</li>
      <li>sudo journalctl -u {{ wso2_service_name }} -f</li>
      </ul>
      <h3>Session Files:</h3>
      <ul>
      <li>Home: {{ session_user_home }}</li>
      <li>Session Workspace: {{ session_user_home }}/workspace/{{ session_name }}</li>
      <li>WSO2 Installation: {{ session_user_home }}/workspace/{{ session_name }}/wso2/</li>
      </ul>
      </body></html>
              '''
              self.wfile.write(response.encode())
      
      def signal_handler(sig, frame):
          print('WSO2 Mock Server ({{ session_name }}) shutting down...')
          sys.exit(0)
      
      if __name__ == "__main__":
          signal.signal(signal.SIGTERM, signal_handler)
          signal.signal(signal.SIGINT, signal_handler)
          PORT = {{ wso2_port }}
          os.chdir('{{ session_user_home }}/workspace/{{ session_name }}/wso2')
          with socketserver.TCPServer(("", PORT), WSO2MockHandler) as httpd:
              print(f"WSO2 Mock Server ({{ session_name }}) running on port {PORT}")
              httpd.serve_forever()
    dest: "{{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/bin/wso2-mock-server.py"
    owner: "{{ session_user }}"
    group: "{{ session_user }}"
    mode: '0755'

- name: Create WSO2 startup script for existing user session
  copy:
    content: |
      #!/bin/bash
      export JAVA_HOME=/usr/lib/jvm/java-{{ java_version }}-openjdk-{{ ansible_architecture }}
      export WSO2_HOME={{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}
      export SESSION_USER={{ session_user }}
      export SESSION_NAME={{ session_name }}
      PIDFILE=$WSO2_HOME/wso2carbon.pid
      LOGFILE=$WSO2_HOME/repository/logs/wso2carbon.log
      
      case "$1" in
        start)
          echo "Starting WSO2 API Manager for session {{ session_name }} (user: {{ session_user }})..."
          cd $WSO2_HOME
          # Ensure proper ownership
          chown -R {{ session_user }}:{{ session_user }} {{ session_user_home }}/workspace/{{ session_name }}/wso2/
          # Start as existing user
          su - {{ session_user }} -c "cd $WSO2_HOME && python3 $WSO2_HOME/bin/wso2-mock-server.py > $LOGFILE 2>&1 &"
          # Get PID of the Python process
          sleep 2
          pgrep -f "wso2-mock-server.py.*{{ session_name }}" > $PIDFILE
          echo "WSO2 Mock started for session {{ session_name }} on port {{ wso2_port }}"
          ;;
        stop)
          echo "Stopping WSO2 API Manager for session {{ session_name }}..."
          if [ -f $PIDFILE ]; then
            kill $(cat $PIDFILE) 2>/dev/null
            rm -f $PIDFILE
          fi
          # Kill any remaining processes for this session
          pkill -f "wso2-mock-server.py.*{{ session_name }}" 2>/dev/null || true
          ;;
        restart)
          $0 stop
          sleep 2
          $0 start
          ;;
        status)
          if [ -f $PIDFILE ] && ps -p $(cat $PIDFILE) > /dev/null 2>&1; then
            echo "WSO2 Mock ({{ session_name }}) is running on port {{ wso2_port }}"
            exit 0
          else
            echo "WSO2 Mock ({{ session_name }}) is not running"
            exit 1
          fi
          ;;
        *)
          echo "Usage: $0 {start|stop|restart|status}"
          exit 1
          ;;
      esac
    dest: "{{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/bin/api-manager.sh"
    owner: "{{ session_user }}"
    group: "{{ session_user }}"
    mode: '0755'

- name: Create WSO2 systemd service for session
  copy:
    content: |
      [Unit]
      Description=WSO2 API Manager - Session {{ session_name }} (User: {{ session_user }})
      After=network.target

      [Service]
      Type=forking
      User=root
      Group=root
      ExecStart={{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/bin/api-manager.sh start
      ExecStop={{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/bin/api-manager.sh stop
      PIDFile={{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/wso2carbon.pid
      Restart=on-failure
      RestartSec=10
      Environment="JAVA_HOME=/usr/lib/jvm/java-{{ java_version }}-openjdk-{{ ansible_architecture }}"
      Environment="SESSION_USER={{ session_user }}"
      Environment="SESSION_NAME={{ session_name }}"

      [Install]
      WantedBy=multi-user.target
    dest: "/etc/systemd/system/{{ wso2_service_name }}.service"
    mode: '0644'

- name: Reload systemd for session service
  systemd:
    daemon_reload: yes

- name: Start WSO2 service for session
  systemd:
    name: "{{ wso2_service_name }}"
    state: started
    enabled: yes

- name: Wait for WSO2 to be ready
  wait_for:
    port: "{{ wso2_port }}"
    host: "{{ ansible_default_ipv4.address }}"
    timeout: 60
    delay: 5

- name: Set JAVA_HOME in existing user's bashrc
  lineinfile:
    path: "{{ session_user_home }}/.bashrc"
    line: "export JAVA_HOME=/usr/lib/jvm/java-{{ java_version }}-openjdk-{{ ansible_architecture }}"
    create: yes
    owner: "{{ session_user }}"
    group: "{{ session_user }}"

- name: Create WSO2 info file for existing user session
  copy:
    content: |
      WSO2 API Manager {{ wso2_version }} Training Environment
      ======================================================
      
      üéì TRAINING MODE: Mock Installation Active
      üë§ User: {{ session_user }}
      üìõ Session: {{ session_name }}
      üè† User Home: {{ session_user_home }}
      üìÅ Session Workspace: {{ session_user_home }}/workspace/{{ session_name }}
      
      üåê Access Information:
      =====================
      Main URL: https://{{ ansible_default_ipv4.address }}:{{ wso2_port }}/
      Username: admin
      Password: admin
      SSH Access: ssh {{ session_user }}@{{ ansible_default_ipv4.address }}
      
      üõ†Ô∏è System Commands:
      ===================
      Check Status: sudo systemctl status {{ wso2_service_name }}
      View Logs: sudo journalctl -u {{ wso2_service_name }} -f
      Start Service: sudo systemctl start {{ wso2_service_name }}
      Stop Service: sudo systemctl stop {{ wso2_service_name }}
      Restart Service: sudo systemctl restart {{ wso2_service_name }}
      
      üìÅ Directory Structure:
      ======================
      Installation: {{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/
      Configuration: {{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/repository/conf/
      Logs: {{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/repository/logs/
      Scripts: {{ session_user_home }}/workspace/{{ session_name }}/wso2/wso2am-{{ wso2_version }}/bin/
      Session Workspace: {{ session_user_home }}/workspace/{{ session_name }}/
      
      üßπ Session Cleanup:
      ==================
      When training is complete, clean up this session:
      sudo systemctl stop {{ wso2_service_name }}
      sudo systemctl disable {{ wso2_service_name }}
      sudo rm /etc/systemd/system/{{ wso2_service_name }}.service
      sudo systemctl daemon-reload
      rm -rf {{ session_user_home }}/workspace/{{ session_name }}
      
      This will:
      - Stop the WSO2 service for this session
      - Remove the session workspace
      - Keep the existing user {{ session_user }} intact
      - Prepare the VM for the next training session
    dest: "{{ session_user_home }}/workspace/{{ session_name }}/wso2-info.txt"
    owner: "{{ session_user }}"
    group: "{{ session_user }}"
    mode: '0644'

- name: Display WSO2 session completion message
  debug:
    msg:
      - "üéâ WSO2 API Manager {{ wso2_version }} setup complete for session {{ session_name }}!"
      - "üéì Training mock installation is active"
      - "üåê Access at: https://{{ ansible_default_ipv4.address }}:{{ wso2_port }}/"
      - "üë§ User: {{ session_user }}"
      - "üìõ Session: {{ session_name }}"
      - "üîê SSH: ssh {{ session_user }}@{{ ansible_default_ipv4.address }}"
      - "üßπ Cleanup: rm -rf {{ session_user_home }}/workspace/{{ session_name }}"
